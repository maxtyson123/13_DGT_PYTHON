.TH "tools" 3 "Sun Mar 12 2023" "Version 0.55" "Quiz Game" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tools
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "list \fBsort_multi_array\fP (list data, bool descending=False)"
.br
.ti -1c
.RI "bool \fBstring_bool\fP (str text)"
.br
.ti -1c
.RI "Exception or str \fBip_address\fP (str text)"
.br
.ti -1c
.RI "object \fBget_user_input_of_type\fP (object type_to_convert, str input_message='', list must_be_one_of_these=None, list allow_these=None, int max_time=0)"
.br
.ti -1c
.RI "object \fBset_if_none\fP (object variable, object value)"
.br
.ti -1c
.RI "object \fBtry_convert\fP (object variable, type type_to_convert, bool supress_errors=False)"
.br
.ti -1c
.RI "None \fBinstall_package\fP (str package)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "bool \fBimported_timeout\fP = False"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS " object tools\&.get_user_input_of_type (object type_to_convert, str  input_message = \fC''\fP, list  must_be_one_of_these = \fCNone\fP, list  allow_these = \fCNone\fP, int  max_time = \fC0\fP)"

.PP
.nf
Get user input of a specific type, if the input is not of the correct type then the user will be asked to re-enter
until they do\&.


@param type_to_convert: The type to convert the input to
@param input_message: The message to display to the user (then ' > ') (By default: '')
@param must_be_one_of_these: If the input must be one of these values then enter them here (By default: None)
@param allow_these: Allow input of these items (Not type specific) (checked first so 'must_be_one_of_these' doesn't
                     apply to these items) (By default: None)
@param max_time: The maximum time the user has to enter input (in seconds) (0, for no limit) (By default: 0)
@return: The user input converted to the type specified

.fi
.PP
 
.PP
Definition at line \fB84\fP of file \fBtools\&.py\fP\&.
.SS " None tools\&.install_package (str package)"

.PP
.nf
Install a package using pip

@param package: The package to install
@return: None

.fi
.PP
 
.PP
Definition at line \fB195\fP of file \fBtools\&.py\fP\&.
.SS " Exception or str tools\&.ip_address (str text)"

.PP
.nf
A type to use to check if the string is a valid IP address, if it is then the string will be returned,
if it isn't than a ValueError will be raised\&. Must adhere to the IP address format of V4\&.

@param text:  The text to check
@return: True if the text is a valid IP address, False if it isn't

.fi
.PP
 
.PP
Definition at line \fB60\fP of file \fBtools\&.py\fP\&.
.SS " object tools\&.set_if_none (object variable, object value)"

.PP
.nf
Set a variable to a value if the variable is None

@param variable: The variable to check if its None
@param value: The value to set the variable to if its None
@return: The variable

.fi
.PP
 
.PP
Definition at line \fB161\fP of file \fBtools\&.py\fP\&.
.SS " list tools\&.sort_multi_array (list data, bool  descending = \fCFalse\fP)"

.PP
.nf
Sorts a multi-dimensional array by the second value in each array using lambda shorthand, returns a copy of the list
instead of sorting the original incase caller wants to keep the original list\&. If the descending parameter is set
then the data will be sorted in reverse order\&. The second array in the list must be a list of numbers\&.

@param data: The list to be sorted
@param descending: Weather to sort in descending order or not\&. By default, this is False\&.
@return: The sorted list (a copy of the original list)

.fi
.PP
 
.PP
Definition at line \fB13\fP of file \fBtools\&.py\fP\&.
.SS " bool tools\&.string_bool (str text)"

.PP
.nf
A replacement for the built-in bool function that allows for the conversion of a string with the text
'True/False' to a bool\&. It will raise a ValueError if the text is not 'True' or 'False' otherwise it will return
the value\&.

@note string_bool is a replacement for the built-in bool function as when using bool() to convert a string to a
bool it will return True if there is any text in the string and False if there isn't, however I need it to return
True if the string is 'True' and False if the string is 'False'

@note: Do not use this when loading from JSON as the JSON module will convert the string to a bool

@param text: The text to convert to a bool
@return: The bool value of the text\&. Value Error if the text is not 'True' or 'False'

.fi
.PP
 
.PP
Definition at line \fB37\fP of file \fBtools\&.py\fP\&.
.SS " object tools\&.try_convert (object variable, type type_to_convert, bool  supress_errors = \fCFalse\fP)"

.PP
.nf
Try to convert a variable to a type, if it fails then return None

@param variable: The variable to convert
@param type_to_convert: The type to convert the variable to
@param supress_errors: Weather to supress errors or not (By default: False)
@return: The converted variable or None if it failed

.fi
.PP
 
.PP
Definition at line \fB175\fP of file \fBtools\&.py\fP\&.
.SH "Variable Documentation"
.PP 
.SS "bool tools\&.imported_timeout = False"

.PP
Definition at line \fB7\fP of file \fBtools\&.py\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Quiz Game from the source code\&.
